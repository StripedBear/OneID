name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Deploy Backend to Render
  deploy-backend:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        wait-for-success: true

  # Deploy Frontend to Vercel
  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build application
      run: |
        cd frontend
        npm run build

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

  # Deploy Database to Supabase
  deploy-database:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Run database migrations
      run: |
        cd backend
        alembic upgrade head
      env:
        DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}

  # Health check after deployment
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-database]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 60

    - name: Check backend health
      run: |
        curl -f ${{ secrets.BACKEND_URL }}/health || exit 1

    - name: Check frontend health
      run: |
        curl -f ${{ secrets.FRONTEND_URL }} || exit 1

  # Notify deployment status
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-database, health-check]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.health-check.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          # Add success notification here
        else
          echo "❌ Deployment failed!"
          # Add failure notification here
        fi

